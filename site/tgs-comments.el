(require 'time-stamp)

(defun insert-tgs-comment-templ (fname comments)
  (insert "/******************************************************************************" "\n")
  (insert "* PROCEDURE: " fname "\n")
  (insert "* PURPOSE: " comments "\n")
  (insert "*" "\n")
  (insert "* HISTORY:" "\n")
  (insert "*  Arthur Ma    " (time-stamp-month-dd-yyyy)  "    Initial Implementation." "\n")
  (insert "*" "\n")
  (insert "******************************************************************************/"))

(defun decode-c++-fcname (line)
  (let (alst blst1 blst2 cname)
    (setq alst (split-string line "::"))
    (setq blst1 (split-string (car alst)))
    (setq cname (last blst1))
    (setq blst2 (split-string (cadr alst) "("))
    (setq fname (car blst2))
    (setq cname (car cname))
    (when (eq (aref cname 0) ?*)
      (setq cname (substring cname 1)))
    (format "%s::%s" cname fname)
  ))

(defun decode-c-fcname (line)
  (let (alst blst1 blst2 cname)
    (setq alst (split-string line "("))
    (setq blst1 (split-string (car alst)))
    (setq cname (last blst1))
    (setq blst2 (split-string (cadr alst) "("))
    (setq fname (car blst2))
    (setq cname (car cname))
    (when (eq (aref cname 0) ?*)
      (setq cname (substring cname 1)))
    (format "%s" cname)
  ))

(defun tgs-comment-templ ()
  (interactive)
  (let (pos1 pos2 line fcname)
    (setq pos1 (line-beginning-position))
    (setq pos2 (line-end-position))
    (setq line (buffer-substring-no-properties pos1 pos2))
    (if (> (length (split-string line "::")) 1)
        (setq fcname (decode-c++-fcname line))
      (setq fcname (decode-c-fcname line)))
    (print fcname)
    (goto-char (line-beginning-position))
    (insert "\n")
    (previous-line 1)
    (insert-tgs-comment-templ fcname "")
    (previous-line 5)
    (goto-char (line-end-position))
  ))

(defun tgs-comment-test ()
  (let (line fcname)
    ;;(setq line "BlockRoutineGUI *BatchGUIApp::createBlockGUI ()")
    (setq line "static void removeBranch (Node *split, Node *p)")
    ;(setq fcname (decode-c++-fcname line))
    (setq fcname (decode-c-fcname line))
    (print fcname)
  ))

;;(tgs-comment-test)
;(cadr (list 3 4 5))
;;(global-set-key (kbd "\C-c\C-t") 'tgs-comment-templ)

(defun replace-list-char (alst ch1 ch2)
  (let (blst)
    (dolist (ch alst)
      (if (eq ch ch1)
          (setq blst (append blst (list ch2)))
        (setq blst (append blst (list ch)))))
    blst))

;;(setq alst (string-to-list "abc.exe"))
;;(concat (replace-list-char alst ?. ?_))
(defun tgs-build-hpp-header-string (fname)
  (let (blst bstr f1 f2)
    (setq blst (replace-list-char (string-to-list fname) ?. ?_))
    (setq bstr (concat blst))
    (print bstr)
    (format "__%s__" bstr)))
;;(tgs-build-hpp-header-string "LittleDrawingCanvas.hpp")

(defun ama-build-c++-header ()
  (interactive)
  (let (hname)
    (setq hname (tgs-build-hpp-header-string (buffer-name)))
    (print hname)
    (goto-char (point-min))
    (insert "#ifudef " hname "\n")
    (insert "#define " hname "\n")
    (goto-char (point-max))
    (insert "\n" "#endif" "\n")))
  
(defun ama-test ()
  (let (line ostr cname)
    (setq cname "AAAAA")
    (setq line "virtual bool on_focus_out_event(GdkEventFocus* event);")
    (with-temp-buffer
      (insert line)
      (goto-char (point-min))
      (replace-string "virtual" "")
      (replace-string ";" "")
      (goto-char (point-min))
      (replace-regexp "^ *" "")
      (setq ostr (buffer-substring-no-properties (point-min) (point-max))))
    (print ostr)
    (insert ostr "\n")
    (insert "{" "\n")
    (insert "  fprintf (stderr, \"" ostr "\");" "\n")
    (insert "}" "\n")
    ))

(defun ama-build-c++-body ()
  (interactive)
  (let (line alst cur ostr cname)
    (setq line (buffer-substring-no-properties
                (line-beginning-position)
                (line-end-position)))
    (setq cname (buffer-name))
    (setq alst (split-string cname "\\."))
    (setq cname (car alst))
    (with-temp-buffer
      (insert line)
      (goto-char (point-min))
      (replace-string "virtual" "")
      (replace-string ";" "")
      (goto-char (point-min))
      (replace-regexp "^ *" "")
      (setq line (buffer-substring-no-properties (point-min) (point-max))))
    (setq alst (split-string line))
    (setq cur alst)
    (setcar (cdr cur)
            (format "%s::%s" cname (cadr cur)))
    (setq ostr "")
    (dolist (v alst)
      (setq ostr (concat ostr v " ")))
    (goto-char (line-beginning-position))
    (kill-line)
    ;;(insert "\n")
    (insert ostr)
    (insert "\n")
    (insert "{" "\n")
    (insert "  fprintf (stderr, \"" ostr "\");" "\n")
    (insert "}" "\n")
    ))

(defun ama-line-append (line str)
  (concat line str))

(defun ama-set-last (alst val)
  (let ((p1 alst) p2)
    (setq p2 (cdr p1))
    (if p2
        (progn
          (while p2
            (setq p1 p2)
            (setq p2 (cdr p1)))
          (setcar p1 val))
      (setcar alst val))
    ))

(defun ama-set-last-test ()
  (let (aa)
    (setq aa '(3 4 5))
    (ama-set-last aa "astr")
    (message "%S" aa)))
;;(ama-set-last-test)

;;(string-match "[^\t {]" "     {")
(defun ama-line-begin-with (line str)
  (let (rc)
    (message "%S --> %S" str line)
    (setq rc (string-match str line))
    (if rc
        (>= rc 0)
      nil)
  ))
;;(ama-line-begin-with "      {" "{")

(defun c++-style-rearrange(pos1 pos2)
  (interactive "rRegion")
  ;;(message "c++-style-rearrange(%S, %S)" pos1 pos2)
  (let (lines (olst nil))
    (setq lines (ama-region2lines pos1 pos2))
    ;;(ama-dump-lines lines)
    (dolist (line lines)
      (if (ama-line-begin-with line "{")
          (ama-set-last olst (ama-line-append (car (last olst)) "{"))
        (setq olst (append olst (list line)))))
    olst))



    