(defun ama-git-clean ()
  (interactive)
  (goto-char (point-min))
  (delete-matching-lines "~$")
  (goto-char (point-min))
  (delete-matching-lines "#$")
  (goto-char (point-min))
  (delete-matching-lines "o$")
  (goto-char (point-min))
  (replace-string "modified:" "git add")
  (goto-char (point-min))
  (replace-string "deleted:" "git rm")
  )

(defun ama-get-line-text ()
  (let (pos1 pos2 txt)
    (setq pos1 (line-beginning-position))
    (setq pos2 (line-end-position))
    (setq txt (buffer-substring-no-properties pos1 pos2))
    txt))

(defun ama-replace-current-line (new_l)
  ;;(interactive "M")
  (goto-char (line-beginning-position))
  (kill-line)
  (insert new_l)
  ;;(insert "\n")
  )

(defun ama-combine-strings (slst sep)
  (let ((ostr "")
        (i 0)
        (n (length slst)))
    (dolist (s slst ostr)
      (if (< i (- n 1))
          (setq ostr (concat ostr s sep))
        (setq ostr (concat ostr s)))
      (setq i (1+ i)))
    ostr))

(defun ama-region2lines (pos1 pos2)
  ;;(message "%d %d" pos1 pos2)
  (let ((lines nil) ltxt)
    (save-excursion
      (goto-char pos1)
      (while (< (point) pos2)
        (setq ltxt (ama-get-line-text))
        (setq lines (append lines (list ltxt)))
        (forward-line 1)))
    lines))

(defun ama-git-process-one-line (line)
  (insert "git add " line "\n")
  )

(defun ama-git-add (pos1 pos2)
  (interactive "r")
  (setq off 0)
  (let (lines line alst alst2 txt)
    (setq lines (ama-region2lines pos1 pos2))
    (dolist (line lines)
      (ama-git-process-one-line line))))

