(defun ama-list-copy (xlst)
  (copy-sequence  xlst)
  )
;;(ama-list-copy (list 3 4 5))

(defun ama-list-arrange (ilst fields)
  (let (a i n e olst)
    (setq n (length ilst))
    (dolist (i fields)
      (when (< i 0)
        (setq i (+ n i)))
      (when (< i n)
        (setq e (nth i ilst))
        (setq olst (append olst (list e)))))
    olst))

(defun ama-list-arrange-test0 ()
  (let (line ilst olst)
    (setq line "1,2,3,4,5,6,7,8,9,10,")
    (setq ilst (ama-line-split line ","))
    (ama-list-arrange ilst (list 0 3 -2))
    ))
;;(ama-list-arrange-test0)

;;#0 Offset,RecvX,RecvY,ShotX,ShotY,X,XLine,Y,YLine,
;;#0 =1,2820000,4620000,4820000,2620000,1,1,1,1,

(defun ama-list-dump (alst sep)
  (message "%S\n" alst))
;;(ama-list-dump (list 3 4 5) ",")

(defun ama-list-dump2buffer (alst sep)
  (let (a estr)
    (dolist (a alst)
      (when (stringp a)
        (setq estr a))
      (when (numberp a)
        (setq estr (number-to-string a)))
      (insert estr sep))
    (insert "\n")))
;;(ama-list-dump2buffer (list 3 4 5) ",")
;;(ama-list-dump2buffer (list "#0 =1" "2820000" "4620000" "4820000") ",")

(defun ama-list-replace (alst spat tpat)
  (let (olst s item)
    (dolist (s alst)
      (setq item (ama-string-replace s spat tpat))
      (setq olst (append olst (list item))))
    olst))
;;(ama-list-replace (list "abc" "efg") "abc" "whi")

(defun ama-list-multiple-replace (alst pats)
  (let (olst s item)
    (dolist (s alst)
      (setq item (ama-string-multiple-replace s pats))
      (setq olst (append olst (list item))))
    olst))

(defun ama-list-multiple-replace-test ()
  (ama-list-multiple-replace
       (list "abc" "efg")
       (list (list "abc" "whi")
             (list "efg" "www"))))
;;(ama-list-multiple-replace-test)

(defun ama-list-mapping (klst0 spat tpat)
  (let (olst item x)
    (dolist (x klst0)
      (setq item (ama-list-replace (list x) spat tpat))
      (setq olst (append olst (list (list x (car item))))))
    olst))
;;(ama-list-mapping (list "abc" "efg") "abc" "ghi")

(defun ama-list-mappings (klst0 pats)
  (let (olst item x)
    (dolist (x klst0)
      (setq item (ama-list-multiple-replace (list x) pats))
      (setq olst (append olst (list (list x (car item))))))
    olst))

(defun ama-list-mappings-test ()
  (ama-list-mappings
       (list "abc" "efg")
       (list (list "abc" "whi")
             (list "efg" "www"))))
;;(ama-list-mappings-test)

(defun ama-list-mappings (klst0 pats)
  (let (olst item x)
    (dolist (x klst0)
      (setq item (ama-list-multiple-replace (list x) pats))
      (setq olst (append olst (list (list x (car item))))))
    olst))

(defun ama-list-item-list (klst0 n)
  (let (olst x)
    (dolist (x klst0)
      (setq olst (append olst (list (nth n x)))))
    olst))
      
(defun ama-list-item-list-test ()
  (let (klst0)
    (setq klst0 (list (list 3 4)
                      (list 8 12)))
    (ama-list-item-list klst0 0)))
;;(ama-list-item-list-test)
    
(defun ama-list-remove-duplicates (a)      
  (remove-duplicates a :test 'string=))
;;(ama-list-remove-duplicates (list "3" "2" "2" "1"))
