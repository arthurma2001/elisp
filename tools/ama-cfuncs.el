;DDS_DEBUG cdds_check(
;   DDS_DEBUG new_flag)
;
;  int cddx_writeto();
(defun ama-buffer-remove-one-cfunc ()
  (let (pos1 pos2)
    (setq pos1 (line-beginning-position))
    (if (re-search-forward ";" nil t)
        (setq pos2 (line-end-position))
      (setq pos2 (point-max)))
    (delete-region pos1 pos2)))
;;(ama-buffer-remove-one-cfunc)

(defun ama-buffer-remove-cfunc (func)
  (let (xxx)
    (print (format "defun ama-buffer-remove-cfunc - %s" func))
    (goto-char (point-min))
    (while (re-search-forward func nil t)
      (ama-buffer-remove-one-cfunc)
      )))
;;(ama-buffer-remove-cfunc "cdds_in")

(defun ama-buffer-remove-cfunc-P (func)
  (interactive "Mfunc=")
  (save-current-buffer 
    (ama-buffer-remove-cfunc func)))

(defun ama-cfunc-name-parse (line)
  (let (alst1 alst2 fline)
    (if (not (ama-string-find line "("))
        nil
      (progn
        (setq alst1 (ama-line-split line "("))
        (setq fline (ama-string-trim (car alst1)))
        (setq alst2 (ama-line-split fline " "))
        (car (last alst2))))))
;;(ama-cfunc-name-parse "double bgds_scale (")

(defun ama-cfunc-type-parse (line)
  (let (alst1 alst2 fline oname)
    (if (not (ama-string-find line "("))
        nil
      (progn
        (setq alst1 (ama-line-split line "("))
        (setq fline (ama-string-trim (car alst1)))
        (setq alst2 (ama-line-split fline " "))
        (setq N (length alst2))
        (if (eq 1 N)
            (setq oname (car alst2))
          (setq oname (concat (nth 0 alst2) " " (nth 1 alst2))))
        oname))
    ))
;;(ama-cfunc-type-parse "unsigned char bgds_scale (")

(defun ama-cfunc-param-name-parse (line)
  (let (alst1 alst2 alst3)
    (setq alst1 (ama-line-split line ","))
    (setq alst2 (ama-line-split (car alst1) " "))
    (setq alst3 (ama-line-split (car (last alst2)) "*"))
    (car (last alst3))
    ))
;;(ama-cfunc-param-name-parse "const char *out_units, ")

(defun ama-cfunc-type-parse (line)
  (let (alst1 alst2 alst3)
    (setq line (ama-string-trim line))
    (setq alst1 (ama-line-split line "("))
    (setq alst2 (ama-line-split (car alst1) "*"))
    (ama-string-trim (car alst2))
    ))
;;(ama-cfunc-type-parse "  const char *out_units, ")

(defun ama-buffer-insert-one-cfunc-from-proto (lines spat tpat)
  (let (line cname ctype pname plst x)
    (setq cname (ama-cfunc-name-parse (car lines)))
    (setq ctype (ama-cfunc-type-parse (car lines)))
    (print (format "lines=%S cname=%s" lines cname))
    (setq cname (ama-string-replace cname spat tpat))
    
    (dolist (line (cdr lines))
      (setq pname (ama-cfunc-param-name-parse line))
      (setq plst (append plst (list pname))))
    (backward-delete-char 1)
    (insert "{\n")
    (if (string= "void" ctype)
        (insert "  " cname " (\n    ")
      (insert "  return " cname " (\n    "))
    (dolist (x plst)
      (when x
        (insert x ",")))
    (backward-delete-char 3)
    (insert ";\n}\n")
))

(defun ama-buffer-get-cfunc-proto ()
  (let (pos1 pos2)
    (setq pos1 (line-beginning-position))
    (if (re-search-forward ";" nil t)
        (setq pos2 (line-end-position))
      (setq pos2 (point-max)))
    (setq lines (ama-region-lines pos1 pos2))
    (goto-char pos2)
    lines))

(defun ama-buffer-add-one-cfunc (spat tpat)
  (let (lines)
    ;;(print "defun ama-buffer-add-one-cfunc (spat tpat)")
    ;;(next-line)
    (setq lines (ama-buffer-get-cfunc-proto))
    ;;(print (format "lines = %S" lines))
    (ama-buffer-insert-one-cfunc-from-proto lines spat tpat)))

;;(ama-buffer-add-one-cfunc "bgd" "cdd")
;;double bgds_scale (
;;   const char *out_units,
;;   const char *in_units)
;

(defun ama-buffer-add-one-cfunc-P ()
  (interactive)
  (ama-line-skip-empty)
  (ama-buffer-add-one-cfunc "bgd" "cdd"))
;;(global-set-key (kbd "C-c C-x") 'ama-buffer-add-one-cfunc-P)

; 5.55112e-18 0 -0.025 ---> (*vertex)[i] = osg::Vec3(...)
(defun ama-cfunc-osg-arraytext2c++ (line name index func)
  (let (plst p)
    (setq line (ama-string-trim line))
    (setq plst (split-string line))
    (insert "\n")
    (insert name "[" (number-to-string index) "] = " func "(")
    (dolist (p plst)
      (insert p ","))
    (delete-backward-char 2)
    (insert ");\n")
    ))
;;(ama-cfunc-osg-arraytext2c++ " 5.55112e-18 0 -0.025" "(*vertex)" 12 "osg::Vec3f")

(defun ama-cfunc-arraytext2c++ (line)
  (let (plst p)
    (setq line (ama-string-trim line))
    (setq plst (split-string line))
    (insert "  ")
    (dolist (p plst)
      (insert p ","))
    (insert "\n")
    ))
;;(ama-cfunc-arraytext2c++ " 5.55112e-18 0 -0.025")


;;#define bgds_initopenmp cdds_initopenmp
;;int bgds_initopenmp(void)
;;{
;;  return cdds_initopenmp();
;;}
(defun ama-cfunc-to-define (lines)
  (let (fname1 fname2 flst1 line) 
    (setq fname1 (ama-cfunc-name-parse (car lines)))
    (dolist (line (cdr lines))
      (when (ama-string-find line "return")
        (setq flst1 (split-string line))
        (setq fname2 (car (split-string (car (cdr flst1))"(")))
        (message "fname2 = %S" fname2)
        ))
    (concat "#define " fname1 " " fname2)
  ))

(defun ama-cfunc-to-define-test ()
  (let (lines)
    (setq lines (append lines (list "int bgds_initopenmp(void)")))
    (setq lines (append lines (list "{")))
    (setq lines (append lines (list "  return cdds_initopenmp();")));
    (setq lines (append lines (list "}")));
    (ama-cfunc-to-define lines)
    ))
;;(ama-cfunc-to-define-test)

(defun ama-buffer-get-cfunc-body ()
  (let (lines line done)
    (setq done nil)
    (while (not done)
      (setq line (ama-line-current2text))
      (if (ama-string-empty line)
          (setq done t)
        (when (not done)
          (setq lines (append lines (list line))))
          (next-line)
          (when (>= (point) (point-max))
            (setq done t))
          ;;(message (format "lines=%S" lines))
        ))
      lines))

(defun ama-buffer-get-cfunc-body-test ()
  ;;(interactive)
  (let (lines)
    (setq lines (ama-buffer-get-cfunc-body))
    (message "lines = %S" lines)))
  
(defun ama-buffer-cfunc-to-define (out-buf)
  (let (lines out)
    (setq lines (ama-buffer-get-cfunc-body))
    (setq out (ama-cfunc-to-define lines))
    (ama-buffer-print out-buf out)
    (next-line)))

(defun ama-buffer-cfunc-to-define-P ()
  (interactive)
  (ama-line-skip-empty)
  (ama-buffer-cfunc-to-define "aaaa.txt")
  )
(global-set-key (kbd "C-c C-x") 'ama-buffer-cfunc-to-define-P)

(defun ama-cfunc-decode-param-name (pline)
  (let (plst1 plst2)
    (setq plst1 (ama-line-split pline " "))
    (setq plst2 (ama-line-split (car (last plst1)) "&"))
    (car (last plst2))))
;;(ama-cfunc-decode-param-name "int & a")

(defun ama-cfunc-param-names (line)
  (let (alst1 alst2 alst3 alst4 fline pline pname plst)
    (if (not (ama-string-find line "("))
        nil
      (progn
        (setq alst1 (ama-line-split line "("))
        (setq fline (ama-string-trim (car (cdr alst1))))
        (setq alst2 (ama-line-split fline ")"))
        (setq alst3 (car alst2))
        (setq alst4 (ama-line-split alst3 ","))
        (dolist (pline alst4)
          (setq pname (ama-cfunc-decode-param-name pline))
          (setq plst (append plst (list pname)))
          ))
      )
    plst))
;;(ama-cfunc-param-names "DataTrans getDataTrans (int a, int b);")

(defun ama-cfunc-proto-to-func ()
  (interactive)
  (let (ctype cname plst axx0 x line)
    (setq line (ama-line-current2text))
    (setq cname (ama-cfunc-name-parse line))
    (setq ctype (ama-cfunc-type-parse line))
    (setq plst (ama-cfunc-param-names line))
    (setq axx0 (ama-string-replace line ";" ""))
    
    (kill-line)
    (insert "\n")
    (insert axx0 "\n")
    (insert "{\n")
    (if (not (string-equal cname "void"))
        (insert "  return myImp->mDataMapper->" cname " (");
      (insert "  myImp->mDataMapper->" cname " ("))
    (when (> (length plst) 0)
      (dolist (x plst)
        (insert x ",")))
    (backward-delete-char 1)
    (insert ");\n}\n")
    (next-line)
  ))
;;(global-set-key (kbd "C-c C-x") 'ama-cfunc-proto-to-func)
;;DataTrans getDataTrans (int a, int b);
;;  DataTrans getDataTrans (int a, int b)
;;  {
;;    return myImp->mDataMapper->getDataTrans(a, b);
;;  }
