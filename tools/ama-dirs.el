(defun ama-dir-diff-filenames (d1 d2 pat)
  (let (x alst blst olst)
    (setq alst (directory-files d1))
    (setq blst (directory-files d2))
    (dolist (x alst)
      (when (and (not (member x blst))
                 (ama-string-find x pat))
        (setq olst (append olst (list x)))
        ))
    (dolist (x blst)
      (when (and (not (member x alst))
                 (ama-string-find x pat))
        (setq olst (append olst (list x)))
        ))
    olst))

(defun ama-dir-common-filenames (d1 d2 pat)
  (let (x alst blst olst)
    (setq alst (directory-files d1))
    (setq blst (directory-files d2))
    (dolist (x alst)
      (when (and (member x blst) (ama-string-find x pat))
        (setq olst (append olst (list x)))
        ))
    olst))
;;(ama-dir-common-filenames "/data0/scratch/ama/projects/tomo/jobsd60" "/data0/scratch/ama/projects/tomo/jobsd60.old/" "_@")

(defun ama-dir-diff-filenames-buffer (d1 d2 ofname pat)
  (let (olst x)
    (setq olst (ama-dir-diff-filenames d1 d2 pat))
    (save-current-buffer
      (set-buffer (get-buffer-create ofname))
      (erase-buffer)
      (save-excursion
        (dolist (x olst)
          (insert (concat d1 "/" x) " " (concat d2 "/" x) "\n"))))
    ))

(defun ama-dir-diff-filenames-P (d1 d2 ofname pat)
  (interactive "sDir1:\nsDir2:\nBoutput:\nsPat:")
  (ama-dir-diff-filenames-buffer d1 d2 ofname pat)
  )

(defun ama-dir-common-filenames-buffer (d1 d2 ofname pat)
  (let (olst x)
    (setq olst (ama-dir-common-filenames d1 d2 pat))
    (save-current-buffer
      (set-buffer (get-buffer-create ofname))
      (erase-buffer)
      (save-excursion
        (dolist (x olst)
          (insert (concat d1 "/" x) " " (concat d2 "/" x) "\n"))))
    ))

(defun ama-dir-common-filenames-P (d1 d2 ofname pat)
  (interactive "sDir1:\nsDir2:\nBoutput:\nsPat:")
  (ama-dir-common-filenames-buffer d1 d2 ofname)
  )

(defun ama-dir-make (dname)
  (unless (file-exists-p dname)
    (make-directory dname))
  )
(ama-dir-make "/tmp/aaa")

(defun ama-dir-delete (dname)
  (delete-directory dname)
  )
;;(ama-dir-delete "/tmp/aaa")

(require 'dired-aux)
(defun ama-dir-copy (ds dt)
  (dired-copy-file-recursive ds dt nil nil nil 'always)
  )
;;(ama-dir-copy "/home/ama/src/ImageProject/bgds" "/tmp/aaa")

(defun ama-dir-make-common-files (dir1 dir2)
  (let (xlst)
    (setq xlst
          (ama-dir-common-filenames dir1 dir2 ""))
    xlst))
;;(ama-dir-make-common-files  "/tmp1/" "/tmp2/")

(defun ama-dir-make-diff-common-files-cmd (dlst ofname)
  (let (flst dir1 dir2 fname olst cmd)
    (dolist (dpair dlst)
      (setq dir1 (car dpair))
      (setq dir2 (car (cdr dpair)))
      (setq flst
            (ama-dir-make-common-files dir1 dir2))
      (setq olst nil)
      (dolist (fname flst)
        (when (not (or (ama-string-ends-with fname "..")
                       (ama-string-ends-with fname ".")))
          (setq cmd (format "diff -urN %s %s"
                            (concat dir1 fname) (concat dir2 fname)))
          (setq olst (append olst (list cmd)))))
      (setq olst (ama-list-remove-duplicates olst))
      (ama-file-save-list ofname olst)
      )))

(defun ama-dir-make-dir-pair (dir1 dir2 fname)
  (list (concat dir1 fname "/") (concat dir2 fname "/")))
;;(ama-dir-make-dir-pair "/tmp1/" "/tmp2/" "aaa.txt")

(defun ama-dir-make-dir-pair-list (dir1 dir2 flst)
  (let (olst d1 fname)
    (dolist (fname flst)
      (setq d1 (ama-dir-make-dir-pair dir1 dir2 fname))
      (setq olst (append olst (list d1))))
    olst
    ))
;;(ama-dir-make-dir-pair-list "/tmp1/" "/tmp2/" (list "aaa.txt" "bbbb.txt"))

(defun ama-dir-build-diff-common-files-cmd (dir1 dir2 flst ofname)
  (let (dlst)
    (setq dlst (ama-dir-make-dir-pair-list dir1 dir2 flst))
    (ama-dir-make-diff-common-files-cmd  dlst ofname)))

;;(ama-dir-build-diff-common-files-cmd "/home/ama/work/tmp/SeisV2/" "/home/ama/work/SeisV2/"
;;                                     (list "ImageViewer" "QtBase" "Base") "aaaa.txt")





(defun ama-files-name-match (fname dfiles)
  (let (xfname fname0 fname1 extname outname pos)
    ;;(message (format "fname=%s" fname))
    ;;(message (format "dfiles=%S" dfiles))
    (dolist (xfname dfiles)
      (setq fname0 (file-name-nondirectory xfname))
      (setq fname1 (file-name-sans-extension fname0))
      (when (string= fname1 fname)
        (setq extname (file-name-extension xfname))
        (when (or (string= extname "C") (string= extname "cpp"))
          (setq outname fname0)
        )))
    outname))
;;(ama-files-name-match "Model" (list "Model2D.cpp"  "Model.cpp" "Model2D.h"  "Model2D.o"))

(defun ama-dir-match-file (dir1 fname1)
  (let (dfiles fmask)
    (setq fmask (concat fname1 ".*"))
    (setq dfiles (directory-files dir1 t fmask))
    (ama-files-name-match fname1 dfiles)
  ))
;;(ama-dir-match-file "/tmp" "tmp")

(defun ama-dir-match-c++-dot-o (dir1 objs)
  (let (alst f1 fname1 fname2 fname3 olst)
    (dolist (f1 objs)
      (setq fname1 (file-name-sans-extension f1))
      (setq fname2 (ama-dir-match-file dir1 fname1))
      (setq fname3 (file-name-nondirectory fname2))
      (setq olst (append olst (list fname3))))
    olst))
;;(ama-dir-match-c++-dot-o "/tmp" (list "tmp01.o"))

(defun ama-dir-traverse (dname file-cb-func)
  (let (f1 flst out-dlst out-flst fullname)
    (setq flst (directory-files dname))
    (dolist (f1 flst)
      (when (not (or (string= f1 ".") (string= f1 "..")))
        (setq fullname (concat dname "/" f1))
        (if (file-directory-p fullname)
            (setq out-dlst (append out-dlst (list fullname)))
          (setq out-flst (append out-flst (list fullname)))
          )))
    (dolist (f1 out-flst)
      (apply file-cb-func (list f1)))
    (dolist (f1 out-dlst)
      (ama-dir-traverse f1 file-cb-func))
    ))

;;(file-directory-p "/tmp/tmp.txt")
;;(ama-dir-traverse "/home/ama/work/elisp" #'(lambda (x) (message "----> %s" x)))

(defun ama-dir-list (d1 pat)
  (let (x alst blst olst)
    (setq alst (directory-files d1))
    (dolist (x alst)
      (when (ama-string-find x pat)
        (setq olst (append olst (list x)))
        ))
    olst))
;;(ama-dir-list "/scratch/ama/workspace/src/ImageProject/SoOD" "\\.h")
