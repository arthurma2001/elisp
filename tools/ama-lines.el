(defun ama-line-current2text ()
  (let (pos1 pos2 txt)
    (setq pos1 (line-beginning-position))
    (setq pos2 (line-end-position))
    (setq txt (buffer-substring-no-properties pos1 pos2))
    txt))

(defun ama-line-replace-current (new_l)
  ;;(interactive "M")
  (goto-char (line-beginning-position))
  (kill-line)
  (insert new_l)
  ;;(insert "\n")
  )

(defun ama-line-split (line sep)
  (let (slst)
    (setq slst (split-string line sep))
    slst))
;;(ama-line-split "#0 =1,2820000,4620000,4820000,2620000,1,1,1,1," ",")

(defun ama-line-split-test ()
  (let (line)
    (setq line "ArtmOutCube.C FileUtils.C PlotSettings.C")
    (ama-line-split line nil)))
;;(ama-line-split-test)

(defun ama-line-split-arrange (line sep fields)
  (let (ilst olst)
    (setq ilst (ama-line-split line sep))
    (setq olst (ama-arrange-list ilst fields))
    olst))
;;(ama-line-split-arrange "#0 =1,2820000,4620000,4820000,2620000,1,1,1,1," "," (list 0 -3 -1))

(defun ama-line-fields-arrange (pos1 pos2 sep fields)
  (let (lines line alst olst)
    (setq lines (ama-region-lines pos1 pos2))
    (dolist (line lines)
      (setq alst (ama-line-split-arrange line sep fields))
      (setq olst (append olst (list alst))))
    olst))

(defun ama-line-keywords (line)
  (let (olst)
    (setq olst (split-string line))
    olst))
;;(ama-line-keywords "This is a get")

(defun ama-line-skip-empty()
  (let (not_found line)
    (setq not_found t)
    (while not_found
      (setq line (ama-line-current2text))
      (if (ama-string-empty line)
          (next-line 1)
        (setq not_found nil)))
    (goto-char (line-beginning-position))))

(defun ama-line-skip-next-empty-P()
  (interactive)
  (next-line)
  (ama-line-skip-empty))
;;(global-set-key (kbd "M-n") 'ama-line-skip-next-empty-P)

(defun ama-line-nth-item (line n)
  (let (alst)
    (setq alst (split-string line))
    (if (< n (length alst))
        (nth n alst)
      nil)))
;;(ama-line-nth-item "int64_t      traceno;    ///< 1-8   Trace number" 1)

(defun ama-copy-line (N)
    (interactive "pTotal line=")
    (let (pos1 pos2 txt)
      ;;(message "N=%S" N)
      (setq pos1 (line-beginning-position))
      (forward-line (- N 1))
      (setq pos2 (line-end-position))
      (push-mark pos2)
      (push-mark pos1 nil t)
      (goto-char pos2)
      ))
(global-set-key (kbd "C-c C-p") 'ama-copy-line)

(defun ama-c++-line-include-replace ()
  (interactive)
  (goto-char (line-beginning-position))
  (when (re-search-forward "\"" nil t)
    (replace-match "<"))
  (when (re-search-forward "\"" nil t)
    (replace-match ">")))
(global-set-key (kbd "C-x p") 'ama-c++-line-include-replace)

 (defun ama-trim-semi-colon(str)
  (let (word0)
    (setq word0 (replace-regexp-in-string ";" "" str))
    (replace-regexp-in-string " " "" word0))
  )
;;(ama-trim-semi-colon "S.dim;")

(defun ama-swap-equal (line)
  (let (words w0 w1)
    (setq words (split-string line "="))
    (setq w0 (ama-trim-semi-colon (car (last words))))
    (setq w1 (ama-trim-semi-colon (first words)))
    (format "%s = %s;" w0 w1)
    ))
;;(ama-swap-equal "myImp->m_dim = S.dim;")

(defun ama-line-swap-equal-interactive ()
  (interactive)
  (let (line0 line1)
    (setq line0 (ama-line-current2text))
    (setq line1 (ama-swap-equal line0))
    (kill-line)
    (insert line1)
    (next-line)
    (goto-char (line-beginning-position))
    ))
(global-set-key (kbd "<f10>") 'ama-line-swap-equal-interactive)
