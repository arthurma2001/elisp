(require 'time-stamp)

(defun insert-sthc-comment-header ()
  (interactive)
  (insert "/******************************************************************************" "\n")
  (insert " * Implementation of \n")
  (insert " *\n")
  (insert " * HISTORY:" "\n")
  (insert " *  Arthur Ma    " (time-stamp-month-dd-yyyy)  "    Initial Implementation." "\n")
  (insert " *" "\n")
  (insert " ******************************************************************************/")
  (previous-line 5)
  (goto-char (line-end-position)))

;;(insert-sthc-comment-header)
(global-set-key (kbd "\C-c\C-v") 'insert-sthc-comment-header)

(defun insert-sthc-comment-templ (fname comments)
  (insert "/******************************************************************************" "\n")
  (insert "* PROCEDURE: " fname "\n")
  (insert "* PURPOSE: " comments "\n")
  (insert "*" "\n")
  (insert "* HISTORY:" "\n")
  (insert "*  Arthur Ma    " (time-stamp-month-dd-yyyy)  "    Initial Implementation." "\n")
  (insert "*" "\n")
  (insert "******************************************************************************/"))
;;(insert-sthc-comment-templ "AAAA" "For Testing")

(defun decode-c++-fcname (line)
  (let (alst blst1 blst2 class)
    (setq alst (split-string line "::"))
    (setq blst1 (split-string (car alst)))
    (setq class (last blst1))
    (setq blst2 (split-string (cadr alst) "("))
    (setq fname (car blst2))
    (setq class (car class))
    ;;(message "c++-fcname=%s::%s" class fname)
    (format "%s::%s" class fname)
  ))
;;(decode-c++-fcname "void AAAA::onTest(int a, int b)")

(defun decode-c-fcname (line)
  (let (alst blst1 blst2 cname)
    (setq alst (split-string line "("))
    (setq blst1 (split-string (car alst)))
    (setq cname (last blst1))
    (setq blst2 (split-string (cadr alst) "("))
    (setq fname (car blst2))
    (setq cname (car cname))
    (when (eq (aref cname 0) ?*)
      (setq cname (substring cname 1)))
    (format "%s" cname)
  ))
;;(decode-c-fcname "static unsigned char *getUserName(char *xxx)")

(defun sthc-comment-templ ()
  (interactive)
  (let (pos1 pos2 line fcname)
    (setq pos1 (line-beginning-position))
    (setq pos2 (line-end-position))
    (setq line (buffer-substring-no-properties pos1 pos2))
    (if (> (length (split-string line "::")) 1)
        (setq fcname (decode-c++-fcname line))
      (setq fcname (decode-c-fcname line)))
    (print fcname)
    (goto-char (line-beginning-position))
    (insert "\n")
    (previous-line 1)
    (insert-sthc-comment-templ fcname "")
    (previous-line 5)
    (goto-char (line-end-position))
  ))

;;void AAAA::onTest(int a, int b);
;;static unsigned char *getUserName(char *xxx)
(global-set-key (kbd "\C-c\C-x") 'sthc-comment-templ)
