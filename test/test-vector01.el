(let (xxx)
  (setq xxx (make-char-table 'test 0))
  (aset xxx 12 108)
  (aref xxx 12)
  (length xxx)
  (char-table-p xxx)
  (char-table-subtype xxx)
  (set-char-table-parent xxx nil)
  (set-char-table-extra-slot xxx 3 nil)
  ;;(char-table-extra-slot xxx 0)
  (char-table-range xxx CHAR)
  )

(let (a b c)
  (setq a (vector 3 4 5))
  (setq b (make-vector 5 nil))
  (setq c (vconcat a b))
  (elt c 2)
  (vectorp a)
  )

(let (xxx yyy)
  (setq xxx [1 2 3 4 5 6])
  (setq yyy (copy-sequence xxx))
  (when (sequencep xxx)
    (length yyy)
    (elt yyy 2))
  (aref yyy 2)
  (aset yyy 2 101)
  (arrayp yyy)
  (fillarray yyy 't)
  )

(let (xxx1 xxx2 xxx3 xxx4 xxx5 xxx6)
  (setq xxx1 (make-bool-vector 12 t))
  (setq xxx2 (make-bool-vector 12 t))
  (bool-vector-p xxx1)
  (setq xxx3 (bool-vector-exclusive-or xxx1 xxx2))
  (setq xxx4 (bool-vector-union xxx1 xxx3))
  (setq xxx5 (bool-vector-intersection xxx3 xxx4))
  (setq xxx6 (bool-vector-set-difference xxx4 xxx5))
  (setq xxx6 (bool-vector-not xxx6))
  (aref xxx6 1)
  (aset xxx6 1 nil)
  (bool-vector-subsetp xxx6 xxx1)
  (bool-vector-count-consecutive xxx1 xxx6 0)
  (bool-vector-count-population xxx1)
  )

(let (xxx1 xxx2)
  (setq xxx1 (make-ring 12))
  (ring-p xxx1)
  (ring-size xxx1)
  (ring-length xxx1)
  (ring-elements xxx1)
  (setq xxx2 (ring-copy xxx1))
  (ring-empty-p xxx2)
  (ring-insert xxx1 "aaa1")
  (ring-ref xxx1 0)
  (ring-remove xxx1 0)
  (ring-insert-at-beginning xxx1 "bbbb1")
  )

(let (xsum)
  (setq xsum 0)
  (mapc #'(lambda (obj) (setq xsum (+ 12 xsum obj)))
        (list 3 4 5))
  (message "xsum = %d" xsum)
  )
