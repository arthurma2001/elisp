(defun atest ()
  (let* ((svalues (list "0" "1.0" "1.5" "1.8"))
         (fvalues nil)
         fval)
    (message "svalues = %S" svalues)
    (message "i,j = %d,%d" 100 200)
    (string-to-number "1.0")

    (dolist (s svalues)
      (setq fval (string-to-number s))
      (message "f = %f" fval)
      ;;(setq fvalues (cons fval fvalues))
      (setq fvalues (append fvalues (list fval)))
      )
    ;;(reverse fvalues)
    fvalues))

(defun list-max-value (alst)
  (let (fmax)
    (when (null alst)
      nil)
    (setq fmax (car alst))
    (dolist (f alst)
      (when (> f fmax)
        (setq fmax f)))
    fmax))

(defun list-min-value (alst)
  (let (fmin)
    (when (null alst)
      nil)
    (setq fmin (car alst))
    (dolist (f alst)
      (when (< f fmin)
        (setq fmin f)))
    fmin))

(setq alst (atest))
(list-max-value alst)
(list-min-value alst)
