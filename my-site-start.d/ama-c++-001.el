(defun ama-decode-c++-funcname (line)
  (let (vlst)
    (setq vlst (split-string line " "))
    ;;(message "vlst = %S" vlst)
    (cadr vlst)
  ))
;;(setq aa (ama-decode-c++-funcname "Vec4d wld2log (const Vec4d &v);"))

(defun ama-decode-c++-varlist (line)
  (let (vlst vv xlst r)
    (setq vlst (split-string line " "))
    (message "vlst = %S" vlst)
    (setq vv (last vlst))
    ;;(setq xlst (split-string vv "\[);\]"))
    (setq xlst (split-string (car vv) "[&);]"))
    (dolist (v xlst)
      (when (> (length v) 0)
        (setq r v)))
    (list r)))
;;(setq aa (ama-decode-c++-varlist "Vec4d wld2log (const Vec4d &v);"))

(defun current-line2text ()
  (let (pos1 pos2)
    (setq pos1 (line-beginning-position))
    (setq pos2 (line-end-position))
    (buffer-substring-no-properties pos1 pos2)))

(defun ama-create-imp-func ()
  (interactive)
  (let (epos cname fname line)
    (setq cname (buffer-name))
    (setq epos (search-forward ";" nil t 1))
    (when epos
      (goto-char (- epos 1))
      (delete-char 1))
    (setq line (current-line2text))
    (setq fname (ama-decode-c++-funcname line))
    (setq vlst (ama-decode-c++-varlist line))
    (message "fname = %S" fname)
    (message "vlst = %S" vlst)
    (insert "\n{\n")
    (insert "  myImp->" fname "(" (car vlst) ");")
    (insert "\n}\n")
    ))

(global-set-key (kbd "C-c b") 'ama-create-imp-func)

(defun ama-add-c++-cname ()
  (interactive)
  (let (epos cname fname line)
    (setq fname (buffer-name))
    (setq cname (car (split-string fname "\\.")))
    (goto-char (line-beginning-position))
    (forward-word)
    (forward-char 1)
    (insert cname "::")
    ))
(global-set-key (kbd "C-c c") 'ama-add-c++-cname)

(defun ama-add-c++-return ()
  (interactive)
  (let (epos cname fname line)
    (setq fname (buffer-name))
    (setq cname (car (split-string fname "\\.")))
    (goto-char (line-beginning-position))
    (forward-word)
    (backward-word)
    (insert "return ")
    ))
(global-set-key (kbd "C-c d") 'ama-add-c++-return)

(defun ama-c++-header2func ()
  (interactive)
  (move-end-of-line 1)
  (backward-char 1)
  (c-electric-delete-forward 1)
  (insert "\n{\n}\n")
  (next-line 1))
(global-set-key (kbd "C-c f") 'ama-c++-header2func)

(defun ama-add-c++-func ()
  (interactive)
  (re-search-forward ";$")
  (delete-char -1)
  (insert "\n{\n")
  (insert "}\n")
  )
;;(global-set-key (kbd "C-c i") 'ama-add-c++-func)

(defun ama-decode-c++-one-var (lstr)
  (let (slst1)
    (setq slst1 (split-string lstr))
    (last slst1)))
;;(ama-decode-c++-one-var "unsigned int a1")

(defun ama-decode-c++-func-vars (var-str)
  (let (vlst olst slst1 v vname)
    (setq slst1 (split-string var-str ","))
    (dolist (v slst1)
      (setq vname (ama-decode-c++-one-var v))
      ;;(message "v = %S, vname=%S" v vname)
      (setq olst (append olst vname))
      )
    olst))
;;(ama-decode-c++-func-vars "int a1, int a2, unsigned int a3")

(defun ama-decode-c++-varlist (line)
  (let (v1 v2 olst)
    (setq v1 (split-string line "("))
    (when (>= (length v1) 2)
      (setq v2 (split-string (cadr v1) ")"))
      (setq olst (ama-decode-c++-func-vars (car v2)))
      (message "olst = %S" olst))
    olst))
;;(ama-decode-c++-varlist "void setTopShadowColor (const GWColor &cl);")
(defun ama-add-c++-imp-func ()
  (interactive)
  (let (line fname vlst cnt n)
    (setq line (current-line2text))
    (setq fname (ama-decode-c++-funcname line))
    (setq vlst (ama-decode-c++-varlist line))
    (message "txt = %S, fname=%S" line fname)
    (re-search-forward ";$")
    (delete-char -1)
    (insert "\n{\n")
    (insert "  myImp->" fname)
    (insert "(")
    (setq cnt 0)
    (setq n (- (length vlst) 1))
    (dolist (v vlst)
      (insert v)
      (when (< cnt n)
        (insert ",")))
    (insert ");\n")
    (insert "}\n")
    )
  )


(global-set-key (kbd "C-c i") 'ama-add-c++-imp-func)

